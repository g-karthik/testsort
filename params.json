{"name":"testsort","tagline":"A custom-made Linux command that plots the increase in the running times of different sorting algorithms with an increase in input size.","body":"Introduction\r\n========\r\n\r\n_testsort_ is a custom-made Linux command created in the Systems Programming Lab course at IIT Patna. The command takes the following input:\r\n\r\n* An initial value _init_ using the `-i` option\r\n\r\n* A resolution value _res_ using the `-r` option\r\n\r\n* A final value _fin_ using the `-f` option\r\n\r\n* An integer _avg_ using the `-a` option\r\n\r\n* A file name using the `-o` option\r\n\r\n* Sorting routines using the `-s` option\r\n\r\nThe sorting routines mentioned in the command may be one, two, three or all four of the mentioned routines in the previous example.\r\n\r\n\r\nWhat the command does\r\n========\r\n\r\nSuppose the user enters the following on the command-line:\r\n\r\n`./testsort -i 50000 -r 10000 -f 100000 -a 10 -o output.txt -s heap merge quick`\r\n\r\n\r\nThe command does the following in response:\r\n\r\n1. Generates a file containing 50000 random numbers\r\n\r\n2. Sorts the numbers 10 times using heap, merge and quick sort routines (available as C executables and internally called by _testsort_)\r\n\r\n3. Computes the average sorting times required by the different sorting routines\r\n\r\n4. Generates a file containing 50000 + 10000 = 60000 random numbers and repeats the previous steps; continues like this till the above procedure is done for a file containing 100000 random numbers\r\n\r\n5. Writes the output of all the above runs (i.e., the average sorting times) in a file named _output.txt_; the write operation is done in a format recognizable by _gnuplot_, a GNU plotting utility\r\n\r\n6. Renders using _gnuplot_ the average sorting times required by the sort routines for the different sample sizes (with X-Axis marked from 50000 to 100000 separated by 10000 and Y-Axis marked with time values)\r\n\r\nThe image is rendered in the file _output.png_.\r\n\r\n\r\nUsage\r\n========\r\nTo find out the parameters to the command and the order in case you forget them, run:\r\n`./testsort -h`\r\n\r\nThe output would be as follows:\r\n\r\n`usage: testsort -i init [50000] -r res [10000] -f fin [100000] -a avg [10] -o filename [out.txt] -s heap merge quick bubble [bubble quick] where default values are specified by []`\r\n\r\n\r\n\r\nNOTE\r\n========\r\n\r\nBefore trying to run the command, run the following commands:\r\n\r\n`gcc quicksort.c -o quick`\r\n\r\n`gcc mergesort.c -o merge`\r\n\r\n`gcc heapsort.c -o heap`\r\n\r\n`gcc bubblesort.c -o bubble`\r\n\r\nThis builds the executables for the sorting algorithms, which are used by the command script.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}